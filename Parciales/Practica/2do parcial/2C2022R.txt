------ Ejercicio 1

En un sistema similar al que implementamos en los talleres del curso (modo protegido con paginación activada), se tienen 5 tareas en ejecución. 
Todas las tareas realizan una cuenta que, al finalizarla, dejan el resultado en EAX. Se desea agregar al sistema una syscall para que las tareas puedan notificar al Kernel que 
terminaron (y que se marque internamente con un flag a dicha tarea). Luego, cuando el Kernel reciba el aviso de las 5 tareas, 
ejecutará una sexta que procesa los resultados (no nos interesa cómo. Por ejemplo; podría sumarlos) y escribe el nuevo resultado final en el EAX de cada tarea.
Cuando una tarea avisa que finalizó, no se le otorgará más tiempo de CPU hasta que la sexta tarea que procesa los datos no haya completado su trabajo.
Cuando eso ocurra, se retomará la ejecución de las 5 tareas y el ciclo se repetirá indefinidamente.

A) Definir o modificar las estructuras de sistema necesarias para que dicho servicio pueda ser invocado.
B) Implementar la syscall que llamarán las tareas.
C) Dar el pseudo-código de la tarea que procesa resultados.
D) Mostrar un pseudo-código de la función sched_next_task para que funcione de acuerdo a las necesidades de este sistema.

A) Para poder implementar esta funcionalidad, habría que agregar una entrada más en la IDT (en la posicion 114, por ej), que apunte a un descriptor en la gdt, 
que a su vez apunte a la rutina de atención de esta nueva syscall. 
    En la gdt, además de los descriptores de datos y codigo de nivel 0 y 3, contariamos también con 6 descriptores, cada uno correspondiente al TSS de una tarea.

    La idea es que cuando una tarea haya terminado de realizar la cuenta, utilice la syscall. La syscall deshabilitará la tarea, y llamará a sched_next_task para ver 
cuál es la siguiente que debe ser ejecutada. En caso de que todas las tareas [1, 5] hayan sido deshabilitadas, entonces sched_next_task habilitará la tarea 6 y la devolverá
como la próxima tarea a ejecutar. La tarea 6 tomará las cuentas de las TSS de las otras tareas, y una vez que termine de procesarlas, va a modificar las TSS para guardarles
el resultado donde corresponda, va a habilitar a todas las tareas en el scheduler de vuelta, y se va a deshabilitar a sí misma (la tarea 6 puede realizar estas acciones 
porque corre con nivel de privilegio 0).

    Para que la tarea 6 no sea llamada hasta que las 5 anteriores hayan finalizado, la misma arrancaria pausada.

B) 

global _isr114

_isr114:
    pushad

    call sched_disable_current  ; Deshablita tarea actual
    call sched_next_task 

    ; No hace falta chequear que sched_next_task devuelva la misma tarea, ya que la estamos deshabilitando antes
    ; Asumimos tambien que las tareas no pueden tener un selector nulo

    mov word [sched_task_selector], ax ; si no es nula, cambia el selector para apuntar a la nueva tarea
    jmp far [sched_task_offset] ; hace el jmp far para que se haga el cambio de tarea y por ende de contexto

    popad 
    iret

D) Por como estamos definiendo la isr, vamos a necesitar modificar sched_next_task para que en caso de que no haya ninguna tarea disponible, devuelva la 6.

uint16_t sched_next_task(void) {

    // Para evitar problemas de desincronización, si la tarea 6 se está corriendo al caer el clock, que siga corriendo hasta terminar
    if(current_task = 5)
        return sched_tasks[5].selector

    // Contar cantidad de tareas pausadas
    uint8_t estanTodasPausadas = 1;
    
    for(int i = 0; i < 5; i++) {
        if(sched_tasks[i].state != 'PAUSED')
            estanTodasPausadas = 0;
    }

    // Si las 5 primeras están pausadas, devolver tarea 6
    if(estanTodasPausadas){
        current_task = 5;
        return sched_tasks[5].selector; 
    }

    // Si no, devolver proxima tarea
    {... codigo del sched original}

}

C) La tarea 6 se vería así

void tarea_6() {

    // Buscamos resultados de otras tareas
    uint32_t resultados_cuentas[5];
    for(int i = 0; i < 5; i++) {
        resultados_cuentas[i] = tss_tasks[i].eax;
    }

    // Procesamos resultados
    uint32_t resultado_final = {... procesamiento de resultados};

    // Mandarlo a la tss de cada una de las tareas y habilitarlas
    for(int i = 0; i < 5; i++) {
        tss_tasks[i].eax = resultado_final;
        // habilitar tareas en el sched
        sched_tasks[i].state = TASK_RUNNABLE;
    }

    // Deshabilitar tarea
    sched_disable_current();
    // seria en asm, la idea es cederle el tiempo de ejecucion restante a la tarea 1 
    jmp_far_tarea_1();
}

------ Ejercicio 2

Se desea implementar una modificación sobre un kernel como el de los talleres: en el momento de desalojar una tarea, 
se deben escribir a disco todas las páginas de dicha tarea que hayan sido modificadas mientras la tarea corría.
Se les pide que hagan una función que, dado el CR3 de la tarea a desalojar, devuelva un arreglo de direcciones virtuales con las páginas 
que deben ser escritas a disco para esta nueva funcionalidad.

vaddr_t* paginas_modificadas(int32_t cr3) {

    pd = page_directory_from_cr3(cr3);
    vaddr_t* array_paginas_modificadas[cantidad_paginas_modificadas(cr3)];  
    uint32 index = 0;

    for(int i = 0; i < 1024; i++) {
        if(pd[i] tiene el bit present) {
            for(int j = 0; j < 1024; j++) {
                if(pd[i].pt[j] tiene el bit de present y de dirty) {
                    // i es el offset que tenemos en el page directory, j es el offset en la page table
                    array_paginas_modificadas[index] = i << 22 + j << 12; // no hay offset fisico (no? "Ed confirmame a la brevedad pls" -Luca)
                    index++;
                }
            }
        }
    }
    return array_paginas_modificadas;
}

uint_32_t cantidad_paginas_modificadas(int32_t cr3) {

    pd = page_directory_from_cr3(cr3);
    uint_32_t cantidad_paginas_modificadas = 0;

    for(int i = 0; i < 1024; i++) {
        if(pd[i] tiene el bit present) {
            for(int j = 0; j < 1024; j++) {
                if(pd[i].pt[j] tiene el bit de present y de dirty) {
                    cantidad_paginas_modificadas++;
                }
            }
        }
    }
    return cantidad_paginas_modificadas; 
}
------ Ejercicio 1

En un sistema similar al que implementamos en los talleres del curso (modo protegido con paginación activada), 
se necesita implementar una llamada al sistema que permita crear una tarea idéntica a la tarea que invocó la llamada. 
El contexto y el mapa de memoria de la nueva tarea, se explicará a continuación.

A) Modificar las estructuras del sistema necesarias para que todas las tareas puedan invocar a esta nueva syscall. 
Indique las modificaciones que introduciría, y en qué archivos del sistema implementado en los talleres las harían.
B) Implementar la rutina correspondiente a dicha syscall de manera que:
    1) Se genere una nueva tarea cuyo contexto inicial sea una copia del último contexto almacenado de la tarea actual 
y que pueda ser ejecutada en algún momento por el sistema.
    2) Se realicen los mismos mapeos para código, datos y pila en todos los niveles (kernel y usuario), 
con la diferencia que las páginas de datos y pila de usuario quedarán en sólo lectura. 
Explique primero el algoritmo con sus palabras y luego codifíquelo. Recuerde que cada tarea debe tener mapeado al kernel 
con mapeo identidad y además, que cada tarea deberá tener su propia copia física de la pila de nivel 0. Suponga que la pila de nivel 0 de
cada tarea ocupa una única página en el área del kernel.
C) Expliquen con sus palabras un mecanismo que permita generar una copia física de la página cuando se intente escribir en las páginas de datos 
y/o las de pila de nivel de usuario de la nueva tarea. La nueva página debe permitir las escrituras. 

Para obtener nuevas páginas físicas del nivel correspondiente, puede usar las rutinas del taller: mmu_next_free_kernel_page y mmu_next_free_user_page. 
Además de estas funciones, puede usar cualquier función definida en el taller como parte de la solución.

A) Para implementar esta nueva funcionalidad, además de las TSS de las tareas ya existentes, y los descriptores en la gdt, hay que modificar: 
    - Las tss de las tareas. Se les agregaría un nuevo campo que indicaría en qué direccion física se encuentra su código. Como al crear una tarea en el archivo tasks.c,
se sabe en qué dirección física comienza su código, esta dirección puede ser mandada a la función tss_create_user_task para que la guarde en la tss.
    - Ademas agregariamos una entrada en la idt correspondiente a la rutina de atencion de la syscall a crear. Esta tendría dpl = 3 ya que seria una syscall llamada desde otras tareas.
La entrada en la idt apuntaria a un descriptor en la gdt correspondiente al codigo de la rutina de atencion para la syscall (dpl = 0). 

B) El funcionamiento de la syscall sería de la siguiente manera:
    1) Una tarea 1 utiliza la syscall
    2) Utilizando la TSS de la tarea 1, ubicamos el comienzo de sus dos páginas de código
    3) Utilizando las funciones mmu_next_free_user_page() y copy_page(), pedimos dos páginas para el código de la nueva tarea (llamemosla 2), y las copiamos 
       en el segmento de memoria correspondiente a la tarea 2
    4) Utilizando la función create_task, y mandandole la nueva direccion obtenida (que posee el codigo de la tarea), creamos la nueva tarea 2, le iniciamos 
    el esquema de paginación, y le creamos la tss
    5) Modificamos la tss de la tarea 2, copiando la tss de la tarea 1, poniendo el eip en el lugar donde arranca el código, y manteniendo el cr3 que ya tenía

global isr222
    _isr222:
    pushad
    call mapear_codigo_nueva_tarea
    popad ; vuelve a la tarea llamadora sin ningun cambio
    iret
    
void mapear_codigo_nueva_tarea(){
    // Buscamos inicio de codigo
    tss_t tss_tarea_actual = tss_tasks[current_task] ; 
    paddr_t code_start = tss_tarea_actual.code_start;

    // Copiamos las dos páginas de código
    paddr_t inicio_pagina_codigo = mmu_next_free_user_page();
    copy_page(inicio_pagina_codigo, code_start);
    copy_page(mmu_next_free_user_page(), code_start + PAGE_SIZE);

    // Creamos la nueva tarea con la ubicación de su código
    int8_t new_task_id = create_task(0, inicio_pagina_codigo); // Modificada para que reciba el inicio del código
    
    copiarTSS(new_task_id, current_task);  // Funcion que copia la tss, reinicia el eip al inicio del código y NO TOCA el cr3, ni el EBP/ESP de ningun nivel :thumbs_up:
}

NOTA:
    - Dentro de create_task, se llama a tss_create_user_task, que llama a mmu_init_task_dir. Esta ultima mapea las páginas del stack como read/write, cuando el enunciado
pide que el stack sea solo lectura. Esto debería tenerse en cuenta, y crear una función aparte, o agregarle un parámetro para decidir si el stack es escribible o no, etc etc.

C) Al intentar escribir en una pagina de solo lectura, va a saltar una excepción. En la rutina de atención, se debería pedir una nueva pagina, copiar la pagina en la que se
intentó escribir, y mapearla en la posicion de la pagina original. 

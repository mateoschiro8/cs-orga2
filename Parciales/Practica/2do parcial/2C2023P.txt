------ Ejercicio 1

Se desea construir un sistema similar al del taller que debe ejecutar concurrentemente 5 tareas independientes. 
Las tareas de este sistema utilizarán el registro ecx como reservado el cual al ser un registro de la tarea, este puede ser modificado y seteado en cualquier momento. 
El registro ecx contendrá en todo momento un número de ticks del reloj denominado UTC (Unreal Time Clock) el cual será actualizado por el sistema, 
incrementándolo cada vez que la tarea vuelva a ser ejecutada luego de una interrupción de reloj. 
Tener en cuenta que este valor solo esta guardado en un único lugar que se corresponde siempre con el espacio dedicado a los ecx de cada tarea.
Por otro lado, el sistema cuenta además con el servicio fuiLlamadaMasVeces que permite que una tarea pregunte si el UTC de otra tarea es menor que el suyo.
Este servicio espera en edi el ID de la tarea por la que se esta preguntando (los IDs van del 0 al 4) y devuelve el resultado en eax.
El resultado será 0 si la tarea llamadora tiene un UTC menor o igual que la tarea por la que preguntó y 1 en caso contrario.

A) Describir qué entradas están presentes en la GDT indicando los campos que consideren relevantes.
B) Describir qué deben modificar respecto del sistema del taller para que el valor UTC se actualice correctamente en los ecx de cada tarea.
C) Describir qué y cómo deben modificar el sistema del taller para poder implementar el servicio fuiLlamadaMasVeces.
D) Implementar el servicio fuiLlamadaMasVeces usando asm.
E) Pregunta extra: ¿tiene sentido a nivel sistema tener un registro de propósito general reservado para guardar el UTC? ¿De qué otra manera podría solucionarse?

A) En la GDT, ademas de los descriptores que ya teniamos en nuestro sistema del taller (los segmentos de datos y código de nivel 0 y 3, y el segmento de video),
van a estar presentes las siguientes entradas:
    - 5 descriptores de TSS, uno correspondiente a cada tarea. (Solo uno de estos va a tener el bit de Busy encendido a la vez?).
    El DPL de cada uno va a estar en 0 (porque solo el Kernel puede intercambiar tareas).
    El limit va a ser el necesario para poder almacenar toda la informacion del contexto.
    - 2 descriptores de TSS para las tareas Inicial e Idle
    - El descriptor que corresponde a la rutina de atencion de interrupcion del reloj. (y todas las demas tambien, pero ya estaban en el taller)
    Esta rutina es la que se encarga de atender la interrupcion generada en cada ciclo de clock, que en este caso se encarga de cambiar de tarea por la forma en la que definimos
    nuestro scheduler, y nosotros debemos implementar sobre ella el mecanismo que lleva la cuenta de los UTC.

B) Habría que realizar dos modificaciones principales:
    1) Al crear el TSS de una nueva tarea, además de las cosas esenciales que hay que iniciarle (EIP, ESP, EBP, ESP0, CR3, 
    y los selectores de segmento), iniciarle el registro ECX en 0.
    2) En la rutina de atención a la interrupción del reloj, luego de haber hecho el jmp far a la nueva tarea y retomado el contexto 
    de esta, la rutina debería meterse en la pila de nivel 0 e incrementar el valor del ECX allí pusheado (por el pushad). 
    Sabemos donde está porque el orden de los push es siempre el mismo. Por lo tanto, cuando se retome la ejecucion de la tarea A que habia
    sido interrumpida por el clock, retomara desde la ISR (luego del jmp), es ahi donde vamos a hacer el inc al valor preservado en el stack, para que cuando
    ejecute popad y vuelva a su ejecucion el valor de ECX que recupere desde el stack de nivel 0 sea el anterior incrementado en 1, reflejando que 
    fue modificado al ser interrumpida, como pedia el enunciado.
    (podría sino hacerse un inc ecx luego del popad y antes del iret?)

C) Para implementar el servicio fuiLlamadaMasVeces, vamos a definir una syscall que tenga el numero de interrupcion 99. 
De esta forma, las tareas podran acceder a ella levantando una interrrupcion al numero 99.
Al tratarse de una syscall, vamos a tener que modificar la IDT para definir la entrada correspondiente a esta ISR.
Para ello, vamos a definir primero en la GDT una entrada que contenga el descriptor que nos lleva al codigo de la ISR.
Este debe tener:
    - RPL 0 de modo que solamente el kernel pueda acceder a la ISR
    - Tipo código y solo lectura
    - Present en 1

Luego, en la IDT vamos a definir la entrada 99 de forma que apunte a este descriptor de la GDT. Tendra DPL de nivel 3 (creemos) 
para que las tareas puedan utilizarla, y el present en 1. 

Rutina de atención de interrupción:

        global _isr99
        _isr99:
        pushad

        ; Pushes the contents of the general-purpose registers onto the stack. The registers are stored on the stack in the following order: 
        ; EAX, ECX, EDX, EBX, ESP (original value), EBP, ESI, and EDI (if the current operand-size attribute is 32) and AX, CX, DX, BX, SP 
        ; (original value), BP, SI, and DI (if the operand-size attribute is 16). 
        ; These instructions perform the reverse operation of the POPA/POPAD instructions. 
        ; The value pushed for the ESP or SP register is its value before prior to pushing the first register (see the “Operation” section below).

        push edi ; para pasarle el parametro a la funcion que calcula
        call fuiLlamadaMasVeces ; eax -> true/false
        add esp, 4 ; alineamos otra vez
        mov [esp + offset_EAX], eax ; eax viejo -> tiene el resultado
        
        popad
        iret

Funcion fuiLlamadaMasVeces:

  uint8_t fuiLlamadaMasVeces(uint8_t task_id){
    uint32_t contadorTareaActual = recx();
    uint32_t contadorTareaAComparar = tss_tasks[task_id].ecx;

    if (contadorTareaAComparar > contadorTareaActual){
        return 0;
    }
    return 1;
}

E) Si se tienen solamente esas 5 tareas, una opcion es guardar los UTC de las tareas en una estructura en la memoria compartida, y que el Kernel se encargue
de administrarla. Otra opcion es modificar la TSS de las tareas, agregando un campo UTC en una posicion determinada. 


------ Ejercicio 2

Por un lado tienen un sistema similar al utilizado en el taller de la materia y por el otro una colección de software originalmente diseñado para correr en nivel cero. 
Los programas de dicha colección de software utilizaban la instrucción HLT para apagar la computadora una vez habían terminado su trabajo.
Por razones obvias no podemos permitir esto en un sistema multitarea. Se solicita adaptar el sistema implementado en los talleres para que se puedan utilizar estos
programas en nivel de usuario y sin modificaciones. Cuando éstos intenten ejecutar HLT el sistema operativo debe interpretar esa acción como una solicitud de “fin de la tarea”.

A) ¿Qué excepción ocurrirá cuando un proceso no privilegiado intente ejecutar HLT?
B) ¿Cómo puede determinar que la instrucción que se quiso ejecutar es HLT?
C) ¿Qué pasos debe seguir para “finalizar” un proceso?
D) ¿Cómo determinará el próximo proceso a ejecutar?
E) Describa los cambios que debe realizar a las estructuras del sistema para poder agregar el mecanismo solicitado.
F) Escriba el pseudocódigo necesario para implementar el mecanismo.

A) Cuando un proceso no privilegiado intente ejecutar HLT, va a saltar una General Protection Fault #GP (interrupcion N13)

B) Al saltar una #GP e ir a la rutina de atencion de la misma, el procesador pushea a la pila (de nivel 0) algunos registros, entre ellos, el eip, y un error code luego.
Segun el manual de Intel, el eip pusheado va a quedar apuntando a la instrucción que causó la excepción. Luego, para poder determinar que la instruccion fue un HLT, solo 
es cuestión de buscar el eip en la pila, y fijarse si la instrucción a la que está apuntando es HLT. 

C) (En nuestro taller) Para finalizar un proceso, se debe establecer su estado a SLOT_FREE o PAUSED (quizás es más conveniente utilizar el SLOT_FREE). En nuestro caso, el 
scheduler tiene una función task_disable(), que recibe un task id y lo deshabilita. Además, el task id de la tarea que se está ejecutando actualmente es un variable global, 
por lo que podríamos definir una nueva función llamada current_task_disable(), que no reciba ningún parámetro y llame a task_disable() con el current_task_id
(para ahorrarnos el pasaje de parámetros por la pila)

D) Por la política de nuestro scheduler (la Round-Robin), la próxima tarea a ejecutar va a ser la próxima en la lista (con el id siguiente). Basicamente vamos a usar la funcion
del scheduler que devuelve la proxima tarea slds. En caso de que no haya más tareas para ejecutar, la funcion sched_next_task devuelve la tarea Idle. 
 
E) En el caso de que la rutina para el manejo de esta excepcion no estuviese definida, habría que primero:
    Definir una entrada en la idt para la misma, especificamente la 13 para así poder meternos en la gdt a buscar el descriptor correspondiente.
    Luego, habria que definir una entrada de la gdt que apunte a la rutina de esta interrupcion, y que lleve a cabo el mecanismo definido (mirar el eip etc etc). 
    
F) 
   _isr13:
        ; no hacemos popad ni pushad porque la tarea ya termino cuando se hizo el HLT
        mov eax, [esp + offset_eip] ;para no agarrar el error code, eax -> eip, el offset correspondiente al eip pusheado al momento de la llamada al HLT(stack de la tarea nivel 0).
        mov ax, [eax] ; ax -> instruction code de la instruccion que levanto GP
        
        cmp ax, HLT_OPCODE
        jne .fin ; la gp no la levanto HLT, no handleamos
        
        call sched_next_task ; se encarga de devolver en ax el selector de la proxima tarea
        cmp ax, 0 ; se fija si no es nula
        je .handlear_gpf ; si es nula va al fin

        call current_task_disable ; la idea de esta funcion es poner en estado disable la tarea que levanto el hlt

        mov word [sched_task_selector], ax ; si no es nula, cambia el selector para apuntar a la nueva tarea
        jmp far [sched_task_offset] ; hace el jmp far para que se haga el cambio de tarea y por ende de contexto
        jmp .fin ; iret
    
    .handlear_gpf:
    call manejar_gpf
    .fin:
    ; no hacemos popad, suponemos que muere la tarea que genero la gpf
    iret